{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./node_modules/core-js/modules/es6.function.name.js"],"names":["style","width","float","__webpack_exports__","_ref","_ref$data$allAllCatsV","data","allAllCatsV4Json","totalCount","zz","edges","map","_ref2","node","imgs","filter","x","Object","assign","_ref3","length","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","_ref4","url","g3","i","src","alt","name","Sexe","No_de_R_f_rence","POSTING_DATE","Taille","Couleur","Race","_ge","D_griff_","href","query","dP","__webpack_require__","f","FProto","Function","prototype","nameRE","configurable","get","this","match","e"],"mappings":"kLAGMA,EAAQ,CACZC,MAAO,MACPC,MAAO,QAGTC,EAAA,iBAAeC,GAA2D,IAAAC,EAAAD,EAAxDE,KAAQC,iBAAoBC,EAA4BH,EAA5BG,WACtCC,EADkEJ,EAAhBK,MACvCC,IAAI,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAChBC,EAAOD,EAAKC,KACdD,EAAKC,KAAKC,OAAO,SAACC,GAAD,MAAa,4DAANA,IACxB,GACJ,OAAAC,OAAAC,OAAA,GACKL,EADL,CAEEC,WAGHC,OAAO,SAAAI,GAAA,IAAGL,EAAHK,EAAGL,KAAH,OAAcA,GAAQA,EAAKM,SAGnC,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BAAmBf,GAClBC,EAAGE,IAAI,SAAAa,GAAA,IAAGV,EAAHU,EAAGV,KAAMW,EAATD,EAASC,IAAKC,EAAdF,EAAcE,GAAd,OACNL,EAAAC,EAAAC,cAAA,OAAKvB,MAAOA,GACTc,EAAKH,IAAI,SAACgB,GAAD,OACRN,EAAAC,EAAAC,cAAA,OAAKK,IAAKD,EAAGE,IAAKH,EAAGI,SAEvBT,EAAAC,EAAAC,cAAA,UAAKG,EAAGI,KAAR,KAAgBJ,EAAGK,KAAnB,KAA0BV,EAAAC,EAAAC,cAAA,iBAASG,EAAGM,kBACrCN,EAAGO,aALN,IAKqBP,EAAGQ,OALxB,IAKiCR,EAAGS,QALpC,IAK8CT,EAAGU,KAAMV,EAAGW,KAAH,OAAiBX,EAAGW,IAApB,OAA8BhB,EAAAC,EAAAC,cAAA,WALrF,aAMaG,EAAGY,SAASjB,EAAAC,EAAAC,cAAA,WACvBF,EAAAC,EAAAC,cAAA,KAAGgB,KAAMd,GAAT,sBAOH,IAAMe,EAAK,kCCvClB,IAAAC,EAASC,EAAQ,IAAcC,EAC/BC,EAAAC,SAAAC,UACAC,EAAA,wBACA,SAGAH,GAAkBF,EAAQ,KAAgBD,EAAAG,EAH1C,OAG0C,CAC1CI,cAAA,EACAC,IAAA,WACA,IACA,UAAAC,MAAAC,MAAAJ,GAAA,GACK,MAAAK,GACL","file":"component---src-pages-index-js-1e8d8165248b420fa09e.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\n\nconst style = {\n  width: '45%',\n  float: 'left'\n}\n\nexport default ({ data: { allAllCatsV4Json: { totalCount, edges } } }) => {\n  const zz = edges.map(({ node }) => {\n    const imgs = node.imgs\n      ? node.imgs.filter((x) => x !== 'http://g.petango.com/shared/Photo-Not-Available-cat.gif')\n      : []\n    return {\n      ...node,\n      imgs\n    }\n  })\n  .filter(({ imgs }) => imgs && imgs.length)\n\n  // <pre>{JSON.stringify(zz, null, '  ')}</pre>\n  return (\n    <div>\n      <p>oh my! We have {totalCount}</p>\n      {zz.map(({ imgs, url, g3 }) => (\n        <div style={style}>\n          {imgs.map((i) => (\n            <img src={i} alt={g3.name} />\n          ))}\n          <h2>{g3.name} ({g3.Sexe}) <small>#{g3.No_de_R_f_rence}</small></h2>\n          {g3.POSTING_DATE} {g3.Taille} {g3.Couleur} {g3.Race}{g3._ge && ` de ${g3._ge} ans`}<br />\n          Dégriffé? {g3.D_griff_}<br />\n          <a href={url}>Lien original</a>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport const query = graphql`\n  query {\n    allAllCatsV4Json (\n      sort: {\n        fields: [g3___POSTING_DATE]\n        order: DESC\n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          imgs\n          g3 {\n            name\n            No_de_R_f_rence\n            Esp_ce\n            Sexe\n            Race\n            Taille\n            Couleur\n            D_griff_\n            POSTING_DATE\n            _ge\n          }\n          url\n        }\n      }\n    }\n  }\n`\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n"],"sourceRoot":""}